#summary Getting started with EveDb
#labels Featured

= Getting started =

== Using existing instance ==

If you do not want to create your own AppEngine application, load data into it and deploy, than you can use already existing and running one at [http://odylab-evedb.appspot.com/version http://odylab-evedb.appspot.com]. Couple of dump versions are maintained there, so, feel free to use it.

If you want to have completely independend instance, with own data in Datastore, than go to [GettingStarted#Creating_own_instance creating own instance].

== Clients ==

There are various ways how to communicate with web-services, since they are http and provide both JSON and XML output, it is not hard to use them in any popular programming language.

=== evedb-ws-client ===

As for Java, EveDb provides small library that can work with evedb instances in easy and convenient way.

Add following dependency:
{{{
<dependency>
  <groupId>lv.odylab.evedb</groupId>
  <artifactId>evedb-ws-client</artifactId>
  <version>1.4</version>
</dependency>
}}}

Add following repository:
{{{
<repository>
  <id>evedb.googlecode.com</id>
  <url>http://evedb.googlecode.com/svn/mvnrepo</url>
</repository>
}}}

Usage:
{{{
String eveDbUrl = "http://dev.latest.odylab-evedb.appspot.com";
EveDbWsClient client = new EveDbWsClientImpl(eveDbUrl, new HttpRequestSenderImpl());
InvTypeBasicInfoDto invTypeBasicInfoDto = client.getTypeBasicInfoByTypeName("Tritanium");
}}}

== Creating own instance ==

If you want your own AppEngine application with running EveDb, you will have to create data set using static database dump, upload it into Datastore and deploy Java application into AppEngine.

=== Load data into Datastore ===

==== Static database dump ====

You will need EVE Online static database dump to create dataset that will be loaded into Datastore. There is [http://www.eveonline.com/community/toolkit.asp official one], but it is MSSQL. I used MySQL conversion from [http://wiki.eve-id.net/CCP_Database_Dump_Resources EVEDev].

==== Create CSV files with data ====

Run SQL queries `database/data/*.sql` and store result in corresponding CSV files. E.g. for file `invTypes.sql` you should have `invTypes.csv`.

==== Upload data into Datastore ====

You will need [http://code.google.com/appengine/downloads.html AppEngine SDK] (both Java and Python). I will assume that you read [http://code.google.com/appengine/ AppEngine docs] and managed to create application. Edit `database/python/app.yaml` to set your application id. Run `database/python/*Loader.py` scripts to load CSV data into Datastore.

=== Deploy application ===

Build application with `mvn-clean-package.bat` and deploy with `ws/appcfg-update.bat`.