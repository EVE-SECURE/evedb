#summary Starting to use EveDb
#labels Featured

= Getting Started =

== Using existing instance ==

If you do not want to create your own AppEngine application, load data into it and deploy, than you can use already existing and running one at [http://odylab-evedb.appspot.com/version http://odylab-evedb.appspot.com]. I maintain couple of dump versions, so, feel free to use it. Just go to page with available [Methods Methods] and see what you can do.

== Creating own instance ==

You you want your own AppEngine application with running EveDb, you will have to create data set using dump, upload it into Datastore and deploy application.

=== Load data into Datastore ===

==== Static database dump ====

You will need EVE Online static database dump to create dataset that will be loaded into Datastore. I used MySQL variant from [http://wiki.eve-id.net/CCP_Database_Dump_Resources EVEDev].

==== Create CSV files with data ====

Run SQL queries `database/data/*.sql` and store result in corresponding CSV file. E.g. for file `invTypes.sql` you should have `invTypes.csv`.

==== Uploading data into Datastore ====

You will need [http://code.google.com/appengine/downloads.html AppEngine SDK] (both Java and Python). I will assume that you read [http://code.google.com/appengine/ AppEngine docs] and managed to create application. Edit `database/python/app.yaml` to set your application id. Run `database/python/*Loader.py' scripts to load CSV data into Datastore.

=== Deploy application ===

Build application with `mvn-clean-package.bad` or `mvn clean package`, deploy `ws/appcfg-update.bat` or `appcfg update target/evedb-ws-<VERSION>`. Enjoy.

== Known issues ==

=== Cold start time ===
Google AppEngine stops application if it is not used by anyone for certain amount of time, like 10 minutes, or so. If requests comes when application is stopped, it gets started, so called "cold start" because it takes longer time. Current EveDb cold start time is about 5 seconds. Which is quite high. This is something that will be improved. _Python has much better cold start times._

=== Lookup queries ===
Datastore does not support LIKE operations. Yeah, just like that. So, do not expect that `lookupType/orax` would return you `Thorax`. There is a trick how to make LIKE-queries on Datastore, but they are limited. TBD.

=== Schema migration ===
TBD